# ==============================================
# BCA Communication Platform - Environment Configuration
# ==============================================

# Server Configuration
NODE_ENV=development
PORT=3001

# Database Configuration
MONGODB_URI=mongodb://127.0.0.1:27017/bca-communication

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_EXPIRES_IN=7d

# File Upload Configuration
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=52428800
# Max file size in bytes (50MB = 50 * 1024 * 1024 = 52428800)

# CORS Configuration
CORS_ORIGIN=http://localhost:5173
# For production, change to your domain: https://yourdomain.com

# Socket.io Configuration
SOCKET_CORS_ORIGIN=http://localhost:5173

# Email Configuration (Optional - for future features)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-app-password
# FROM_EMAIL=noreply@bcacomm.edu

# Redis Configuration (Optional - for session management)
# REDIS_URL=redis://localhost:6379

# Application Configuration
APP_NAME=BCA Communication Platform
APP_VERSION=1.0.0
APP_URL=http://localhost:5173

# Security Configuration
BCRYPT_SALT_ROUNDS=10
SESSION_SECRET=your-session-secret-key-change-this

# Rate Limiting Configuration
RATE_LIMIT_WINDOW_MS=900000
# 15 minutes in milliseconds (15 * 60 * 1000)
RATE_LIMIT_MAX_REQUESTS=100
# Maximum requests per window

# File Storage Configuration
STORAGE_TYPE=local
# Options: local, cloudinary, aws-s3
# For cloud storage, add respective configurations below

# Cloudinary Configuration (Optional)
# CLOUDINARY_CLOUD_NAME=your-cloud-name
# CLOUDINARY_API_KEY=your-api-key
# CLOUDINARY_API_SECRET=your-api-secret

# AWS S3 Configuration (Optional)
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-bucket-name

# Logging Configuration
LOG_LEVEL=info
# Options: error, warn, info, debug

# Database Configuration (Advanced)
DB_CONNECTION_TIMEOUT=30000
DB_MAX_POOL_SIZE=10
DB_MIN_POOL_SIZE=5

# API Configuration
API_VERSION=v1
API_PREFIX=/api

# Frontend Configuration (for reference)
FRONTEND_URL=http://localhost:5173
CLIENT_URL=http://localhost:5173

# Production Database (commented out for development)
# MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/bca-communication?retryWrites=true&w=majority

# SSL/TLS Configuration (for production)
# SSL_KEY_PATH=./ssl/private.key
# SSL_CERT_PATH=./ssl/certificate.crt

# Backup Configuration
# BACKUP_SCHEDULE=0 2 * * *
# Daily backup at 2 AM (cron format)
# BACKUP_RETENTION_DAYS=30

# Monitoring Configuration
# SENTRY_DSN=your-sentry-dsn
# DATADOG_API_KEY=your-datadog-key

# Feature Flags
ENABLE_REGISTRATION=true
ENABLE_FILE_UPLOAD=true
ENABLE_YOUTUBE_INTEGRATION=true
ENABLE_POLLS=true
ENABLE_ASSIGNMENTS=true

# Admin Configuration
DEFAULT_ADMIN_EMAIL=admin@bcacomm.edu
DEFAULT_ADMIN_PASSWORD=admin123
# Change this in production!

# Notification Configuration
ENABLE_EMAIL_NOTIFICATIONS=false
ENABLE_PUSH_NOTIFICATIONS=false

# Performance Configuration
ENABLE_COMPRESSION=true
ENABLE_CACHING=true
CACHE_TTL=3600
# Cache time-to-live in seconds (1 hour)

# Development Configuration
DEBUG=true
VERBOSE_LOGGING=true

# ==============================================
# Instructions for Production:
# ==============================================
# 1. Change NODE_ENV to 'production'
# 2. Generate a strong JWT_SECRET using: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# 3. Update MONGODB_URI to your production database
# 4. Set appropriate CORS_ORIGIN for your domain
# 5. Configure email settings for notifications
# 6. Set up SSL certificates
# 7. Configure backup settings
# 8. Set up monitoring tools
# 9. Change default admin credentials
# 10. Set DEBUG=false and VERBOSE_LOGGING=false

# ==============================================
# Security Notes:
# ==============================================
# - Never commit this file to version control in production
# - Use environment-specific .env files (.env.development, .env.production)
# - Store sensitive values in your deployment platform's secret management
# - Regularly rotate JWT_SECRET and other secrets
# - Use strong, unique passwords for database connections
# - Enable SSL/TLS in production
# - Set up proper firewall rules
# - Monitor for security vulnerabilities